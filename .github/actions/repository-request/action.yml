name: Repository Creation
description: Creates a repository based on a parsed issue form json

inputs:
  organization:
    description: Organization Name
    required: true
  token:
    description: Token used for GitHub API calls
    required: false
    default: ${{ github.token }}
  issue-json:
    description: Json of the parsed issue
    required: true

runs:
  using: "composite"
  steps:
    - name: Get Attributes from Form
      id: issue-values
      env:
        JSON: ${{ inputs.issue-json }}
        LC_ALL: "C"
      run: |
        function github_name() {
          echo $1 \
          | tr '[:upper:]' '[:lower:]' \
          | sed -r 's/[\t ]+/-/g' \
          | sed -r 's/[^a-z0-9ß-ü\-]+/-/g' \
          | sed -e 's/ä/ae/g' -e 's/ö/oe/g' -e 's/ü/ue/g' -e 's/ß/ss/g' \
          | sed -r 's/[-]+/-/g' \
          | sed -r 's/^[-]//' \
          | sed -r 's/[-]$//'
        }
        function github_name_array() {
          array=""
          for item in $(echo $1 | tr " " "-" | tr "," " "); do
            array+="$(github_name $item),"
          done
          echo $array | sed 's/.$//'
        }
        NAME=$(github_name "$(echo $JSON | jq -r '.name.text')")
        TEAM=$(github_name "$(echo $JSON | jq -r '.team.text' | sed -E 's/ -.*//')")
        VISIBILITY=$(echo $JSON | jq -r '.visibility.text')

        echo "repo_name=${NAME}" >> $GITHUB_OUTPUT
        echo "team_name=${TEAM}" >> $GITHUB_OUTPUT
        echo "visibility=${VISIBILITY}" >> $GITHUB_OUTPUT
    - name: Get GitHub Host Name
      id: get-host
      shell: bash
      env:
        CONFIG_FILE: config/general.yml
      run: |
        host=$(yq e '.host' $CONFIG_FILE)
        if [ -z "$host" ]; then
          host="github.com"
        fi
        echo "host=$host" >> "$GITHUB_OUTPUT"
    - name: Create Repository with Configuration
      shell: bash
      id: create-repo
      env:
        CONFIG_FILE: config/repositories.yml
        GH_TOKEN: ${{ inputs.token }}
        HOST: ${{ steps.get-host.outputs.host }}
        REPO_OWNER: ${{ github.repository_owner }}
        REPO_NAME: ${{ steps.issue-values.outputs.repo_name }}
        REPO_VISIBILITY: ${{ steps.issue-values.outputs.visibility }}
      run: |
        gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          --hostname $HOST \
          /orgs/$REPO_OWNER/repos \
          -f name=$REPO_NAME \
          -F visibility=$REPO_VISIBILITY \
          -F has_issues=$(yq e '.repository.has_issues' $CONFIG_FILE) \
          -F has_projects=$(yq e '.repository.has_projects' $CONFIG_FILE) \
          -F has_wiki=$(yq e '.repository.has_wiki' $CONFIG_FILE) \
          -F has_downloads=$(yq e '.repository.has_downloads' $CONFIG_FILE) > repo-response.json
        echo "repo_url=$(yq e '.html_url' repo-response.json)" >> "$GITHUB_OUTPUT"

    - name: Add team to repository
      env:
        GH_TOKEN: ${{ inputs.token }}
        REPO_OWNER: ${{ github.repository_owner }}
        REPO_NAME: ${{ steps.issue-values.outputs.repo_name }}
        TEAM_NAME: ${{ steps.issue-values.outputs.team_name }}
      run: |
        team_id=$(gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /orgs/$REPO_OWNER/teams/$TEAM_NAME | jq -r '.id')
        if [ -n "$team_id" ]; then
          gh api \
          --method PUT \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /orgs/$REPO_OWNER/teams/$TEAM_NAME/repos/$REPO_OWNER/$REPO_NAME
        else
          echo ::error title={title}::{"Team not found"}
        fi